go
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const (
	MaxMessageLength = 4096
	APITimeout       = 30 * time.Second
	UpdateTimeout    = 60
	ChunkDelay       = 100 * time.Millisecond
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è API Deepseek
type DeepseekRequest struct {
	Model       string            `json:"model"`
	Messages    []DeepseekMessage `json:"messages"`
	Temperature float64           `json:"temperature,omitempty"`
	MaxTokens   int               `json:"max_tokens,omitempty"`
}

type DeepseekMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type DeepseekResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
	Error *struct {
		Message string `json:"message"`
		Type    string `json:"type"`
	} `json:"error,omitempty"`
}

// Bot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
type Bot struct {
	api       *tgbotapi.BotAPI
	apiKey    string
	client    *http.Client
	logger    *log.Logger
	userStats map[int64]int // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(botToken, apiKey string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	return &Bot{
		api:    api,
		apiKey: apiKey,
		client: &http.Client{Timeout: APITimeout},
		logger: log.New(os.Stdout, "[BOT] ", log.LstdFlags|log.Lshortfile),
		userStats: make(map[int64]int),
	}, nil
}

// callDeepseekAPI –≤—ã–∑—ã–≤–∞–µ—Ç API Deepseek —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (b *Bot) callDeepseekAPI(ctx context.Context, userMessage string) (string, error) {
	url := "https://api.deepseek.com/v1/chat/completions"

	requestBody := DeepseekRequest{
		Model: "deepseek-chat",
		Messages: []DeepseekMessage{
			{
				Role:    "system",
				Content: "You are a helpful assistant. Respond in the same language as the user's message. Be concise but informative.",
			},
			{
				Role:    "user",
				Content: userMessage,
			},
		},
		Temperature: 0.7,
		MaxTokens:   2000,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("failed to marshal request: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+b.apiKey)

	resp, err := b.client.Do(req)
	if err != nil {
		return "", fmt.Errorf("API request failed: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response: %w", err)
	}

	b.logger.Printf("API Status: %d", resp.StatusCode)

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API error (status %d): %s", resp.StatusCode, string(body))
	}

	var deepseekResp DeepseekResponse
	if err := json.Unmarshal(body, &deepseekResp); err != nil {
		return "", fmt.Errorf("failed to parse response: %w", err)
	}

	if deepseekResp.Error != nil {
		return "", fmt.Errorf("API error: %s", deepseekResp.Error.Message)
	}

	if len(deepseekResp.Choices) == 0 {
		return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò", nil
	}

	return strings.TrimSpace(deepseekResp.Choices[0].Message.Content), nil
}

// sendLongMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏
func (b *Bot) sendLongMessage(chatID int64, text string) error {
	if len(text) <= MaxMessageLength {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "Markdown"
		_, err := b.api.Send(msg)
		return err
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
	chunks := b.splitMessage(text, MaxMessageLength)
	for i, chunk := range chunks {
		msg := tgbotapi.NewMessage(chatID, chunk)
		msg.ParseMode = "Markdown"
		
		if i > 0 {
			time.Sleep(ChunkDelay)
		}
		
		if _, err := b.api.Send(msg); err != nil {
			return fmt.Errorf("failed to send message chunk %d: %w", i, err)
		}
	}
	
	return nil
}

// splitMessage —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
func (b *Bot) splitMessage(text string, maxLength int) []string {
	if len(text) <= maxLength {
		return []string{text}
	}

	var chunks []string
	words := strings.Fields(text)
	var currentChunk strings.Builder

	for _, word := range words {
		if currentChunk.Len()+len(word)+1 > maxLength {
			if currentChunk.Len() > 0 {
				chunks = append(chunks, currentChunk.String())
				currentChunk.Reset()
			}
		}
		
		if currentChunk.Len() > 0 {
			currentChunk.WriteString(" ")
		}
		currentChunk.WriteString(word)
	}

	if currentChunk.Len() > 0 {
		chunks = append(chunks, currentChunk.String())
	}

	return chunks
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommand(update tgbotapi.Update) string {
	command := update.Message.Command()
	userID := update.Message.From.ID

	switch command {
	case "start":
		return fmt.Sprintf(`ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–ü—Ä–∏–≤–µ—Ç, %s! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Deepseek.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`, 
			update.Message.From.FirstName)

	case "help":
		return `ü§ñ *–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Deepseek*

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–¥-—Ä–µ–≤—å—é
‚Ä¢ üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ üåê –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ üìù –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ ü§î –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üéì –û–±—É—á–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!`

	case "stats":
		count := b.userStats[userID]
		return fmt.Sprintf(`üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %d

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üöÄ`, count, userID)

	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(ctx context.Context, update tgbotapi.Update) error {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID
	text := update.Message.Text

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	b.userStats[userID]++

	b.logger.Printf("User: %s (%d), Message: %s", 
		update.Message.From.UserName, userID, text)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
	typing := tgbotapi.NewChatAction(chatID, tgbotapi.ChatTyping)
	b.api.Send(typing)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥—É–º–∞–µ–º
	thinkingMsg := tgbotapi.NewMessage(chatID, "ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
	sentMsg, err := b.api.Send(thinkingMsg)
	if err != nil {
		b.logger.Printf("Failed to send thinking message: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
	response, err := b.callDeepseekAPI(ctx, text)
	if err != nil {
		b.logger.Printf("API Error: %v", err)
		response = fmt.Sprintf("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:\n`%s`\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", err.Error())
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
	if sentMsg.MessageID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, sentMsg.MessageID)
		b.api.Send(deleteMsg)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	if err := b.sendLongMessage(chatID, response); err != nil {
		b.logger.Printf("Failed to send response: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		errorMsg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
		b.api.Send(errorMsg)
	}

	return nil
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Run() error {
	b.logger.Printf("Bot authorized as %s", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = UpdateTimeout
	updates := b.api.GetUpdatesChan(u)

	ctx := context.Background()

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
		if update.Message.IsCommand() {
			response := b.handleCommand(update)
			if err := b.sendLongMessage(update.Message.Chat.ID, response); err != nil {
				b.logger.Printf("Failed to send command response: %v", err)
			}
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		go func(upd tgbotapi.Update) {
			if err := b.handleMessage(ctx, upd); err != nil {
				b.logger.Printf("Error handling message: %v", err)
			}
		}(update)
	}

	return nil
}

// loadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func loadConfig() (botToken, apiKey string, err error) {
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}

	botToken = os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		return "", "", fmt.Errorf("TELEGRAM_BOT_TOKEN not found in environment")
	}

	apiKey = os.Getenv("CHUTES_API_TOKEN")
	if apiKey == "" {
		return "", "", fmt.Errorf("CHUTES_API_TOKEN not found in environment")
	}

	return botToken, apiKey, nil
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	botToken, apiKey, err := loadConfig()
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Starting bot with API key: %s...", apiKey[:min(10, len(apiKey))])

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	bot, err := NewBot(botToken, apiKey)
	if err != nil {
		log.Fatal(err)
	}

	if err := bot.Run(); err != nil {
		log.Fatal(err)
	}
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}