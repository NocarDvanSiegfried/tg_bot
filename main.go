package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type ClaudeRequest struct {
	Model    string    `json:"model"`
	Messages []Message `json:"messages"`
	MaxTokens int      `json:"max_tokens"`
}

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type ClaudeResponse struct {
	Content []struct {
		Text string `json:"text"`
	} `json:"content"`
}

func callClaudeAPI(apiKey, userMessage string) (string, error) {
	url := "https://api.anthropic.com/v1/messages"
	
	requestBody := ClaudeRequest{
		Model: "claude-3-haiku-20240307",
		Messages: []Message{
			{
				Role:    "user",
				Content: userMessage,
			},
		},
		MaxTokens: 1000,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-api-key", apiKey)
	req.Header.Set("anthropic-version", "2023-06-01")

	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API error: %s", string(body))
	}

	var claudeResp ClaudeResponse
	if err := json.Unmarshal(body, &claudeResp); err != nil {
		return "", err
	}

	if len(claudeResp.Content) > 0 {
		return claudeResp.Content[0].Text, nil
	}

	return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", nil
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	apiKey := os.Getenv("CHUTES_API_TOKEN")
	if apiKey == "" {
		log.Fatal("CHUTES_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		userID := update.Message.From.ID
		text := update.Message.Text
		
		log.Printf("[%s] %s", update.Message.From.UserName, text)

		var response string

		switch {
		case text == "/start":
			response = "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
		
		case text == "/help":
			response = `ü§ñ –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!
			
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É.
–ú–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —á–µ–º —É–≥–æ–¥–Ω–æ:
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å`

		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚è≥ –î—É–º–∞—é...")
			bot.Send(msg)

			aiResponse, err := callClaudeAPI(apiKey, text)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ API: %v", err)
				response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
			} else {
				response = aiResponse
			}
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
		msg.ParseMode = "Markdown"
		
		if len(response) > 4096 {
			for i := 0; i < len(response); i += 4096 {
				end := i + 4096
				if end > len(response) {
					end = len(response)
				}
				partMsg := tgbotapi.NewMessage(update.Message.Chat.ID, response[i:end])
				partMsg.ParseMode = "Markdown"
				bot.Send(partMsg)
				time.Sleep(100 * time.Millisecond)
			}
		} else {
			bot.Send(msg)
		}
		
		log.Printf("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
	}
}