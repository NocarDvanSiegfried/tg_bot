package main

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3" // Import for SQLite driver
)

const (
	// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL API –¥–ª—è OpenRouter
	APIURL = "https://openrouter.ai/api/v1/chat/completions" 
	// –ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏ OpenRouter, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º
	MODEL = "mistralai/mistral-7b-instruct" 
	DBPATH = "database/users.db"
)

type Config struct {
	TelegramBotToken string
	OpenRouterAPIToken string // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
}

type ChatMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type OpenAIRequest struct {
	Model       string        `json:"model"`
	Messages    []ChatMessage `json:"messages"`
	Stream      bool          `json:"stream"`
	MaxTokens   int           `json:"max_tokens"`
	Temperature float64       `json:"temperature"`
}

type Choice struct {
	Message ChatMessage `json:"message"`
}

type ChatResponse struct {
	Choices []Choice `json:"choices"`
}

type Bot struct {
	config *Config
	api    *tgbotapi.BotAPI
	db     *sql.DB
}

func main() {
	config := loadConfig()

	if config.TelegramBotToken == "" || config.OpenRouterAPIToken == "" {
		log.Fatal("–û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ CHUTES_API_TOKEN –≤ —Ñ–∞–π–ª–µ .env (CHUTES_API_TOKEN —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ OpenRouter)")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db, err := initDB()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer db.Close() // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	api, err := tgbotapi.NewBotAPI(config.TelegramBotToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	bot := &Bot{
		config: config,
		api:    api,
		db:     db,
	}

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", api.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := api.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	for update := range updates {
		bot.handleUpdate(update)
	}
}

func loadConfig() *Config {
	err := godotenv.Load()
	if err != nil {
		fmt.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	return &Config{
		TelegramBotToken:   os.Getenv("TELEGRAM_BOT_TOKEN"),
		OpenRouterAPIToken: os.Getenv("CHUTES_API_TOKEN"), // –ò—Å–ø–æ–ª—å–∑—É–µ–º CHUTES_API_TOKEN –∏–∑ .env
	}
}

func initDB() (*sql.DB, error) {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É database –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	err := os.MkdirAll("database", 0755)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	db, err := sql.Open("sqlite3", DBPATH)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS users (
			user_id INTEGER PRIMARY KEY,
			style TEXT DEFAULT 'friendly'
		)
	`)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %w", err)
	}
	return db, nil
}

func (b *Bot) setUserStyle(userID int64, style string) error {
	_, err := b.db.Exec("INSERT OR IGNORE INTO users (user_id, style) VALUES (?, ?)", userID, style)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}
	_, err = b.db.Exec("UPDATE users SET style = ? WHERE user_id = ?", style, userID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}
	return nil
}

func (b *Bot) getUserStyle(userID int64) (string, error) {
	var style string
	err := b.db.QueryRow("SELECT style FROM users WHERE user_id = ?", userID).Scan(&style)
	if err == sql.ErrNoRows {
		return "friendly", nil // –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
	}
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}
	return style, nil
}

func (b *Bot) sendWelcome(message *tgbotapi.Message) {
	text := "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò!\n\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ /style"

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyToMessageID = message.MessageID

	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) chooseStyle(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π üòä"),
			tgbotapi.NewKeyboardButton("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π üßê"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ú–µ–º–Ω—ã–π ü§™"),
		),
	)
	keyboard.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:")
	msg.ReplyMarkup = keyboard
	msg.ReplyToMessageID = message.MessageID

	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) setStyle(message *tgbotapi.Message) {
	styleMapping := map[string]string{
		"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π üòä": "friendly",
		"–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π üßê": "official",
		"–ú–µ–º–Ω—ã–π ü§™":     "meme",
	}

	selectedStyle, ok := styleMapping[message.Text]
	if !ok {
		// –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–µ —Å—Ç–∏–ª—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
		return
	}

	err := b.setUserStyle(message.From.ID, selectedStyle)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è: %v", err)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", message.Text))
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	msg.ReplyToMessageID = message.MessageID

	_, err = b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) aiChat(message *tgbotapi.Message) {
	userPrompt := strings.TrimSpace(message.Text)

	// –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∫–∞–∫ –Ω–∞ —á–∞—Ç
	styleButtons := []string{"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π üòä", "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π üßê", "–ú–µ–º–Ω—ã–π ü§™"}
	for _, btn := range styleButtons {
		if userPrompt == btn {
			b.setStyle(message)
			return
		}
	}

	if userPrompt == "" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
		msg.ReplyToMessageID = message.MessageID
		_, err := b.api.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	style, err := b.getUserStyle(message.From.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		style = "friendly" // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º—É —Å—Ç–∏–ª—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	stylePrompts := map[string]string{
		"friendly": "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–µ–ø–ª–æ, —Å —ç–º–æ–¥–∑–∏.",
		"official": "–û—Ç–≤–µ—á–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, —Å—Ç—Ä–æ–≥–æ –∏ –≤–µ–∂–ª–∏–≤–æ.",
		"meme":     "–û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –º–µ–º–∞–º–∏, –¥–æ–±–∞–≤–ª—è–π –∑–∞–±–∞–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã.",
	}
	systemPrompt, exists := stylePrompts[style]
	if !exists {
		systemPrompt = stylePrompts["friendly"] // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –µ—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥—É–º–∞–µ–º
	thinkingMsg := tgbotapi.NewMessage(message.Chat.ID, "‚åõ –î—É–º–∞—é...")
	thinkingMsg.ReplyToMessageID = message.MessageID
	sentMsg, err := b.api.Send(thinkingMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	// –ó–∞–ø—Ä–æ—Å –∫ AI
	aiResponse, err := b.makeAIRequest(systemPrompt, userPrompt)
	if err != nil {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
		deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, sentMsg.MessageID)
		b.api.Send(deleteMsg)

		errorMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: %v", err))
		errorMsg.ReplyToMessageID = message.MessageID
		b.api.Send(errorMsg)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
	deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, sentMsg.MessageID)
	b.api.Send(deleteMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
	responseMsg := tgbotapi.NewMessage(message.Chat.ID, aiResponse)
	responseMsg.ParseMode = tgbotapi.ModeMarkdown // OpenRouter —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Markdown
	_, err = b.api.Send(responseMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI: %v", err)
	}
}

func (b *Bot) makeAIRequest(systemPrompt, userPrompt string) (string, error) {
	reqBody := OpenAIRequest{
		Model: MODEL,
		Messages: []ChatMessage{
			{Role: "system", Content: systemPrompt},
			{Role: "user", Content: userPrompt},
		},
		Stream:      false,
		MaxTokens:   1024,
		Temperature: 0.7,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req, err := http.NewRequest("POST", APIURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	req.Header.Set("Authorization", "Bearer "+b.config.OpenRouterAPIToken) // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouterAPIToken
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{
		Timeout: 60 * time.Second,
	}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return "", fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	var chatResp ChatResponse
	err = json.Unmarshal(body, &chatResp)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if len(chatResp.Choices) == 0 {
		return "", fmt.Errorf("–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI")
	}

	return chatResp.Choices[0].Message.Content, nil
}

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	message := update.Message

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			b.sendWelcome(message)
		case "style":
			b.chooseStyle(message)
		default:
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
			msg.ReplyToMessageID = message.MessageID
			b.api.Send(msg)
		}
	} else {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if message.Text != "" {
			b.aiChat(message)
		}
	}
}